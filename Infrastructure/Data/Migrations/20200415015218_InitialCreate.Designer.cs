// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20200415015218_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entitities.BuildType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BuildTypes");
                });

            modelBuilder.Entity("Core.Entitities.BuildTypeLg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BuildTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Lang")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BuildTypeId");

                    b.ToTable("BuildTypesLgs");
                });

            modelBuilder.Entity("Core.Entitities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HtmlCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Core.Entitities.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("BathRooms")
                        .HasColumnType("int");

                    b.Property<int>("BuildTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CancellationPolicy")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CheckinFrom")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CheckinTo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CheckoutUntil")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Disabled")
                        .HasColumnType("int");

                    b.Property<int>("DoublesRooms")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("HouseTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<int>("SinglesRooms")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("TripleRooms")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuildTypeId");

                    b.HasIndex("HouseTypeId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("Core.Entitities.HouseDestinationLg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<string>("Lang")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.ToTable("HouseDestinationLgs");
                });

            modelBuilder.Entity("Core.Entitities.HouseLg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<string>("Lang")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.ToTable("HouseLgs");
                });

            modelBuilder.Entity("Core.Entitities.HousePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ThumbUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.ToTable("HousePhotos");
                });

            modelBuilder.Entity("Core.Entitities.HousePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("AllPropertyPrice")
                        .HasColumnType("double");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SeasonEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("SeasonStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("ShareDoubleRoomPrice")
                        .HasColumnType("double");

                    b.Property<double>("ShareSingleRoomPrice")
                        .HasColumnType("double");

                    b.Property<double>("ShareTripleRoomPrice")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("HouseId");

                    b.ToTable("HousePrices");
                });

            modelBuilder.Entity("Core.Entitities.HouseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HouseTypes");
                });

            modelBuilder.Entity("Core.Entitities.HouseTypeLg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("HouseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Lang")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("HouseTypeId");

                    b.ToTable("HouseTypeLgs");
                });

            modelBuilder.Entity("Core.Entitities.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("Core.Entitities.PropertyTypeLg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Lang")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("PropertyTypeLgs");
                });

            modelBuilder.Entity("Core.Entitities.BuildTypeLg", b =>
                {
                    b.HasOne("Core.Entitities.BuildType", "BuildType")
                        .WithMany("BuildTypeLgs")
                        .HasForeignKey("BuildTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entitities.House", b =>
                {
                    b.HasOne("Core.Entitities.BuildType", "BuildType")
                        .WithMany()
                        .HasForeignKey("BuildTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entitities.HouseType", "HouseType")
                        .WithMany()
                        .HasForeignKey("HouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entitities.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entitities.HouseDestinationLg", b =>
                {
                    b.HasOne("Core.Entitities.House", "House")
                        .WithMany("HouseDestinationLgs")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entitities.HouseLg", b =>
                {
                    b.HasOne("Core.Entitities.House", "House")
                        .WithMany("HouseLgs")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entitities.HousePhoto", b =>
                {
                    b.HasOne("Core.Entitities.House", "House")
                        .WithMany("HousePhotos")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entitities.HousePrice", b =>
                {
                    b.HasOne("Core.Entitities.Currency", "Currency")
                        .WithMany("HousePrices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entitities.House", "House")
                        .WithMany("HousePrices")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entitities.HouseTypeLg", b =>
                {
                    b.HasOne("Core.Entitities.HouseType", "HouseType")
                        .WithMany("HouseTypeLgs")
                        .HasForeignKey("HouseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entitities.PropertyTypeLg", b =>
                {
                    b.HasOne("Core.Entitities.PropertyType", "PropertyType")
                        .WithMany("PropertyTypeLgs")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
